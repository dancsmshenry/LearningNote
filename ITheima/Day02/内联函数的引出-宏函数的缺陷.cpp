#include <iostream>

using namespace std;

//定义一个加法
#define MyAdd(x, y) x + y

void test01(){
    int ret = MyAdd(10, 20) * 20;//预期结果应该是600
    //但是实际上却是410

    cout << "ret = " << ret << endl;
}

#define MyCompare(a, b) ((a) < (b)) ? (a) : (b)

void test02(){
    int a = 10;
    int b = 20;

    int ret = MyCompare(++ a, b);

    cout << "ret = " << ret << endl;
}

/**
 * 宏函数也没有作用域
 * 
 * 内联函数具有普通函数的所有行为，不同之处是内联函数会在适当的地方像预定义宏一样展开，所以不需要函数的开销
 * 在普通函数前面加上inline关键字使之称为内联函数，但是必须注意函数体和声明结合在一起
 * 
 * 内联函数的确占用空间，但是内联函数相对于普通函数的优势只是省去了函数调用时候的压栈、跳转、返回的开销，
 * 可以理解为空间换时间
 * 
 * 在类内部定义内联函数时不是必须的，任何在类内部定义的函数都自动成为内联函数（即默认添加了inline）
 * 
 * 内联函数对于编译器而言只是一个建议，编译器不一定会接受这个建议
 * 如果没有将函数声明为内联函数，编译器也可能会将此函数做内联编译，一个好的编译器将会内联小的，简单的函数
 * 
 * 以下情况不会内联：
 * 任何形式的循环语句
 * 过多条件的循环语句
 * 函数体不能过于庞大
 * 不能对函数进行取址操作
 **/ 

inline void func();//内联函数的声明
void func(){}//如果函数实现的时候没有加inline关键字，那么这个函数就不算是内联函数

int main(){
    // test01();
    test02();
}